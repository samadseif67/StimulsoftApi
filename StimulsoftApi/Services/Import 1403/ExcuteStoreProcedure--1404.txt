 public List<M> ExcuteStoreProcedure<M>(string StoredProcedureName, List<myFilter> AddFilters)
 {
    
     string where = " ";
     string filterRules = "";
      
      

     if (AddFilters != null)
         where = myUtilityStatic.myFilter(filterRules?.ToString(), AddFilters);
     else
         where = myUtilityStatic.myFilter(filterRules?.ToString());

     using var connection = new SqlConnection(myUtilityStatic.GetConnectionString());        
     using (var resultMultiple = connection.QueryMultiple(StoredProcedureName, new { Rows = 300, Page = 1, Where = where, SortName = "id", SortOrder = "", ExportToExcel = false }, commandType:CommandType.StoredProcedure))
     {
        var result = resultMultiple.Read<M>().ToList();                             
        return result;
     };          
 }



//***************************************************************************************************************************
 public class SqlParameterDto
 {
     public string? ParameterName;
     public dynamic? ParameterValue;
 }


  List<SqlParameterDto> LstSqlParameter = new List<SqlParameterDto>();
  LstSqlParameter.Add(new SqlParameterDto() { ParameterName = "@PlanningDetailID", ParameterValue = PlanningDetailID });
  LstSqlParameter.Add(new SqlParameterDto() { ParameterName = "@UserID", ParameterValue = UserID });
  LstSqlParameter.Add(new SqlParameterDto() { ParameterName = "@PlanDatePersion", ParameterValue = PlanDatePersion });

  var Lst = db.ExcuteStoreProcedure<spSumPercentageOfWorkDones>("spSumPercentageOfWorkDone", LstSqlParameter).Select(x => new
  {
      id = x.id,
      sumPercentageOfWorkDoneForUser = x.sumPercentageOfWorkDoneForUser,
  }).ToList();


  public List<TEntity> ExcuteStoreProcedure<TEntity>(string ProcdureName, List<SqlParameterDto> LstSqlParameter) where TEntity : class
  {
      try
      {
          string CollectionParameterName = "";
          foreach (var item in LstSqlParameter)
          {
              CollectionParameterName += (CollectionParameterName.Trim().Length == 0 ? "" : ",") + item.ParameterName;
          }

          ProcdureName = "exec dbo." + ProcdureName;
          string TextCommentSql = ProcdureName + (CollectionParameterName.Trim().Length != 0 ? " " : "") + CollectionParameterName;
          var lst = db.Set<TEntity>().FromSqlRaw(TextCommentSql, (LstSqlParameter.Select(x => new SqlParameter(x.ParameterName, x.ParameterValue)).ToArray())).AsNoTracking().ToList();
          return lst;
      }
      catch (Exception ex)
      {

          throw;
      }
  }